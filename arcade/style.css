* {
  box-sizing: border-box;
}

#title {
    padding-top: 0;
    padding-bottom: 5px;
    position: absolute;
    display: inline-flex;
    align-items:baseline;
    top: 5px;

}

body {
  display: flex;
  align-items: center;
  justify-content: center;
}

.board {
  width: 420px;
  height: 420px;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.cell {
  flex: 0 0 120px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.buttons {
    position: absolute;
    display: inline-flex;
    align-items:baseline;
    justify-content: center;
    bottom: 100px;
}

form {
    display: flex;
    position: absolute;
    justify-content: center;
    align-items: center;
    bottom: 150px;
}
#player1Name {
    display: flex;
    position: left;
    justify-content: left;
}
#player2Name {
    display: flex;
    position: right;
    justify-content: left;
}

/*
  Important Notes for n-th child:
    the counter "n", in nth child starts at 0 and moves upward
      a great way to figure out what "child/items" are selected is to write/compute it out as I do below
    the child/item number starts at 1. the first .cell is # 1 and the last is # 9
*/

/*
  let n = 0: 3(0) + 2 = 2 - match! Middle of row 1
  let n = 1: 3(1) + 2 = 5 - match! Middle of row 2
  let n = 2: 3(2) + 2 = 8 - match! Middle of row 3
  let n = 3: 3(3) + 2 = 11 - no match! There is no 11th .cell, b/c the first .cell is # 1 and the last is # 9
*/
/*
            a = :nth-child(3n+2)
          -2  -1   0   1   2   3   4   5   6   7   8   9   10   11
  n = 0                    a                
  n = 1                                a
  n = 2                                            a
  n = 3                                                          a
*/
/* This rule gives us the vertical grid lines */
.cell:nth-child(3n+2) { 
  border-left: 3px solid black;
  border-right: 3px solid black;
}

/*
  With both :nth-child selectors chained onto .cell, 
  only cells whose number (1-based) that match both computed values of (n + 4) and (-n + 6)
  will have border top and bottom
*/
/*
  let n = 0: 4 and 6 - matched by n = 2
  let n = 1: 5 and 5 - matched by itself; item 5 has been "selected" by both nth-child selectors
  let n = 2: 6 and 4 - matched by n = 1
  -- after n = 2; we will have no matches 
  let n = 3: 7 and 3 - will not apply! no other "n" value will yield this pairing
  let n = 4: 8 and -2 - will not apply! no other "n" value will yield this pairing
*/
/*
            a = :nth-child(n+4), b = :nth-child(-n+6)
          -2  -1   0   1   2   3   4   5   6   7   8
  n = 0                            a       b
  n = 1                                ab
  n = 2                            b       a
  n = 3                        b               a
  n = 4                     b                      a
*/
/* This rule gives us the horizontal grid lines */
.cell:nth-child(n+4):nth-child(-n+6) {
  border-top: 3px solid black;
  border-bottom: 3px solid black;
}

.cell span {
  text-transform: uppercase;
  font-family: monospace;
  font-size: 3rem;
}